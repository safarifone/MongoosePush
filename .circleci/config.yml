version: 2.1

filters: &all_tags
  tags:
    only: /.*/

run: &DOCKER_TAGS
    name: Generate image tag
    command: |
        set -x
        if [ -n "$CIRCLE_TAG" ]; then
        DOCKER_TAG="$CIRCLE_TAG"
        elif [ "$CIRCLE_BRANCH" == "master" ]; then
        DOCKER_TAG="${CIRCLE_SHA1:0:7}"
        else
        DOCKER_TAG=`echo $CIRCLE_BRANCH | sed 's,/,_,g'`
        fi
        env | sort
        echo "export DOCKER_TAG=$DOCKER_TAG" >> $BASH_ENV
        echo "export DOCKER_IMAGE=mongoose-push" >> $BASH_ENV

executors:
  elixir-builder:
    parameters:
      erlang_version:
        type: string
        default: "22.0"
      elixir_version:
        type: string
        default: "1.9"
      env:
        type: string
        default: test
    docker:
      - image: rslota/beam-builder:erlang-<< parameters.erlang_version >>_elixir-<< parameters.elixir_version >>
      - image: mongooseim/fcm-mock-server
      - image: mobify/apns-http2-mock-server
    working_directory: ~/app
    environment:
        MIX_ENV: << parameters.env >>

commands:
  test:
    steps:
      - checkout
      - restore_cache:
          keys:
            - mix-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
      - restore_cache:
          keys:
            - build-${CIRCLE_JOB}-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Wait for FCM mock
          command: dockerize -wait tcp://localhost:4000 -timeout 1m
      - run:
          name: Wait for APNS mock
          command: dockerize -wait tcp://localhost:2197 -timeout 1m

      - run: MIX_ENV=test mix do certs.dev, coveralls.circle

      - save_cache:
          key: build-${CIRCLE_JOB}-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - "_build"
      - store_artifacts:
          path: cover
          destination: coverage_results

jobs:
  pre-build:
    executor: elixir-builder

    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix deps.get
      - run: echo "$OTP_VERSION $ELIXIR_VERSION" > .version_file
      - save_cache:
          key: mix-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
          paths:
                - deps
                - ~/.mix


  dialyzer:
    executor: elixir-builder
    steps:
      - checkout
      - run: echo "$OTP_VERSION $ELIXIR_VERSION" > .version_file
      - restore_cache:
          keys:
            - mix-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
      - restore_cache:
          keys:
            - plt-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum ".version_file" }}-{{ checksum "mix.lock" }}
            - plt-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum ".version_file"  }}
      - run: mix dialyzer --plt
      - save_cache:
          key: plt-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum ".version_file"  }}-{{ checksum "mix.lock" }}
          paths:
            - .dialyzer
            - _build
      - save_cache:
          key: plt-cache-{{ .Environment.CACHE_VERSION }}-{{ checksum ".version_file"  }}
          paths:
            - .dialyzer
      - run:
          name: Execute dialyzer
          command: mix deps.get && mix dialyzer --halt-exit-status

  test-erlang-22_elixir-1-9:
    executor:
      name: elixir-builder
      env: test
      erlang_version: "22.0"
      elixir_version: "1.9"
    steps:
      - test

  test-erlang-22_elixir-1-8:
    executor:
      name: elixir-builder
      env: test
      erlang_version: "22.0"
      elixir_version: "1.8"
    steps:
      - test

  test-erlang-22_elixir-1-7:
    executor:
      name: elixir-builder
      env: test
      erlang_version: "22.0"
      elixir_version: "1.7"
    steps:
      - test

  test-erlang-21_elixir-1-9:
    executor:
      name: elixir-builder
      env: test
      erlang_version: "21.3"
      elixir_version: "1.9"
    steps:
      - test

  test-erlang-21_elixir-1-8:
    executor:
      name: elixir-builder
      env: test
      erlang_version: "21.3"
      elixir_version: "1.8"
    steps:
      - test

  test-erlang-21_elixir-1-7:
    executor:
      name: elixir-builder
      env: test
      erlang_version: "21.3"
      elixir_version: "1.7"
    steps:
      - test

  format_check:
    executor:
      name: elixir-builder
    steps:
      - checkout
      - restore_cache:
          keys:
            - mix-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
      - run: mix format --check-formatted

  build-tar-and-docker-image:
    executor:
      name: elixir-builder
      env: prod
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - mix-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Mix build release
          command: mix do certs.dev, distillery.release
      - run:
          name : Build tar archive
          command: tar -czf mongoose_push.tar.gz -C _build/${MIX_ENV}/rel/mongoose_push .
      - run: *DOCKER_TAGS
      - run:
          name: Build docker image
          command: docker build -f Dockerfile.release --build-arg MIX_ENV=prod -t $DOCKERHUB_REPOSITORY/$DOCKER_IMAGE:$DOCKER_TAG .
      - save_cache:
          key: certs-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
          paths:
            - "priv/"

  integration-tests:
    executor:
      name: elixir-builder
      env: prod
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
            - mix-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
            - certs-cache-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}
      - run: *DOCKER_TAGS
      - run:
          name: Prepare the remote docker
          command: docker network create integration || true
      - run:
          name: create volumes
          command: |
              docker create \
                  -v /opt/app/priv \
                  -v /deps \
                  --name volumes alpine:3.4 /bin/true
      - run:
          name: copy the stuff into the modules
          command: |
              docker cp `pwd`/priv volumes:/opt/app/priv && \
              docker cp `pwd`/deps volumes:/opt/app/deps
      - run:
          name: beam-builder
          command: |
              docker run -d --name beam-builder \
                  --volumes-from volumes \
                  --network integration \
                  rslota/beam-builder:erlang-22.0_elixir-1.9
      - run:
          name: fcm
          command: |
              docker run -d --name fcm \
                  -p 4000:4000 -p 4001:4001 \
                  --network integration \
                  mongooseim/fcm-mock-server
      - run:
          name: mongoose push
          command: |
              docker run -d --name MPush \
                  --volumes-from volumes \
                  --network integration \
                  -e PUSH_FCM_ENABLED=true \
                  -e PUSH_FCM_PORT=4000 \
                  -e PUSH_FCM_ENDPOINT="fcm" \
                  -e PUSH_APNS_ENABLED=false \
                  -e TLS_SERVER_CERT_VALIDATION=false \
                  -e FCM_AUTH_ENDPOINT="http://fcm:4001" \
                  -p 8443:8443 \
                  $DOCKERHUB_REPOSITORY/$DOCKER_IMAGE:$DOCKER_TAG
      - run:
          name: RUN
          command: docker exec beam-builder MIX_ENV=integration mix test test/api test/api/v3_fcm_test.ex

  push-to-dockerhub:
    executor:
      name: elixir-builder
      env: prod
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run: *DOCKER_TAGS
      - run:
          name: Login to DockerHub
          command: docker login -u "${DOCKERHUB_USER}" -p "${DOCKERHUB_PASS}"
      - run:
          name: Tag and push docker image
          command: |
             set -x
             docker push $DOCKERHUB_REPOSITORY/$DOCKER_IMAGE:$DOCKER_TAG
             if [ "$CIRCLE_BRANCH" == "master" ]; then
               docker tag $DOCKERHUB_REPOSITORY/$DOCKER_IMAGE:$DOCKER_TAG $DOCKERHUB_REPOSITORY/$DOCKER_IMAGE:latest
               docker push $DOCKERHUB_REPOSITORY/$DOCKER_IMAGE:latest
             fi

workflows:
  version: 2
  build_and_test:
    jobs:
      - pre-build:
          filters: *all_tags

      - format_check:
          requires:
            - pre-build
          filters: *all_tags
      - dialyzer:
          requires:
            - pre-build
          filters: *all_tags
      - test-erlang-22_elixir-1-9:
          requires:
            - pre-build
          filters: *all_tags
      - test-erlang-22_elixir-1-8:
          requires:
            - pre-build
          filters: *all_tags
      - test-erlang-22_elixir-1-7:
          requires:
            - pre-build
          filters: *all_tags
      - test-erlang-21_elixir-1-9:
          requires:
            - pre-build
          filters: *all_tags
      - test-erlang-21_elixir-1-8:
          requires:
            - pre-build
          filters: *all_tags
      - test-erlang-21_elixir-1-7:
          requires:
            - pre-build
          filters: *all_tags

      - build-tar-and-docker-image:
          requires:
            - pre-build
          filters: *all_tags

      - integration-tests:
          requires:
            - build-tar-and-docker-image
          filters: *all_tags

      - push-to-dockerhub:
          requires:
            - format_check
            - dialyzer
            - integration-tests
            - test-erlang-22_elixir-1-9
            - test-erlang-22_elixir-1-8
            - test-erlang-22_elixir-1-7
            - test-erlang-21_elixir-1-9
            - test-erlang-21_elixir-1-8
            - test-erlang-21_elixir-1-7
          filters: *all_tags
